5.
a) Los mensajes se envián en orden ascendente, 1, 2, 3, 4, 5, 6. Se reciben en este orden, 6, 4, 1, 2, 3, 4. 
Los mensajes se envián en ese orden ya que es el orden en el que lo hacemos en el código. 
Los mensajes se reciben en ese orden ya que dependen de la prioridad, a mayor prioridad, antes se reciben. Al ser una cola, si tenemos varios mensajes con la misma prioridad, se reciben en el orden de llegada (FIFO).

b) Si cambiamos el argumento por O_RDONLY ocurre un error, ya que el descriptor recibido solo puede usarse para leer, por lo tanto no se puede enviar ningun mensaje.
Si lo cambiamos por O_WRONLY, podemos enviar mensajes, pero a la hora de leerlos ocurre un error.

6.
a) El receptor recibe el mensaje sin problemas.
b) Sucede lo mismo pero el receptor se bloquea hasta que recibe el mensaje. Una vez lo recibe continua su ejecución.
c) Si ejecutamos primero el receptor, la ejecución sería erronea ya que al llamar a receive, está función devuelve un error y se cierra el programa.
d) La cola de mensajes es manejada por el sistema operativo, por lo que no sería necesario sincronizar procesos, a no ser que se quiera un orden especifico de ejecución, por ejemplo si tenemos 3 procesos receptores, y queremos que primero lea el P1, luego P3 y por último P2, si queremos ese orden siempre, sí podríamos usar un sistema se sincronización.